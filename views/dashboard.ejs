<!DOCTYPE html>
<html>
<head>
  <title>Dashboard</title>
  <link rel="stylesheet" href="/styles/dashboard.css">
  <link rel="stylesheet" href="/css/style.css">
  <script src="/scripts/dashboard.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body>
  <div class="dashboard-container">
    <div class="dashboard-header">
      <h1>Dashboard</h1>
      <p>Welcome, <%= user.name %></p>
    </div>

    <!-- Statistics Section -->
    <div class="stats-grid">
      <div class="stat-card">
        <h3>Total Devices</h3>
        <p class="stat-number"><%= (user && user.devices) ? user.devices.length : 0 %></p>
      </div>
      <div class="stat-card">
        <h3>By Operating System</h3>
        <canvas id="osChart"></canvas>
      </div>
      <div class="stat-card">
        <h3>By Network</h3>
        <canvas id="networkChart"></canvas>
      </div>
      <div class="stat-card">
        <h3>By Role</h3>
        <canvas id="roleChart"></canvas>
      </div>
      <div class="stat-card">
        <h3>By Hypervisor</h3>
        <canvas id="hypervisorChart"></canvas>
      </div>
    </div>

    <!-- Device Management Section -->
    <div class="device-management">
      <!-- Grouping and Bulk Actions -->
      <div class="management-controls">
        <select id="groupBy" class="form-control">
          <option value="">Group by...</option>
          <option value="operatingSystem">Operating System</option>
          <option value="network">Network</option>
          <option value="systemRole">System Role</option>
        </select>
        <div class="bulk-actions">
          <button id="selectAll" class="btn btn-secondary">Select All</button>
          <button id="exportCSV" class="btn btn-success">Export CSV</button>
          <select id="bulkAction" class="form-control" disabled>
            <option value="">Bulk Actions...</option>
            <option value="delete">Delete Selected</option>
            <option value="updateNetwork">Update Network</option>
            <option value="updateRole">Update Role</option>
          </select>
          <button id="applyBulk" class="btn btn-primary" disabled>Apply</button>
        </div>
      </div>
      <div class="device-table-container">
        <table id="deviceTable" class="device-table">
          <thead>
            <tr>
              <th><input type="checkbox" id="selectAllCheckbox"></th>
              <th data-sort="name">Device Name <span class="sort-arrow">↕</span></th>
              <th data-sort="ipAddress">IP Address <span class="sort-arrow">↕</span></th>
              <th data-sort="hostname">Hostname <span class="sort-arrow">↕</span></th>
              <th data-sort="operatingSystem">OS <span class="sort-arrow">↕</span></th>
              <th data-sort="network">Network <span class="sort-arrow">↕</span></th>
              <th data-sort="systemRole">Role <span class="sort-arrow">↕</span></th>
              <th data-sort="hypervisor">Hypervisor <span class="sort-arrow">↕</span></th>
              <th data-sort="domainUser">Domain User <span class="sort-arrow">↕</span></th>
              <th data-sort="zscalerUser">Zscaler User <span class="sort-arrow">↕</span></th>
              <th data-sort="zscalerSegment">Zscaler Segment <span class="sort-arrow">↕</span></th>
              <th>Notes</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% const devices = (user && user.devices) ? user.devices : []; %>
            <% if(devices.length > 0) { %>
              <% devices.forEach(function(device) { %>
                <tr data-device-id="<%= device._id %>">
                  <td><input type="checkbox" class="device-select" value="<%= device._id %>"></td>
                  <td><%= device.name %></td>
                  <td><%= device.ipAddress %></td>
                  <td><%= device.hostname %></td>
                  <td><%= device.operatingSystem %></td>
                  <td><%= device.network %></td>
                  <td><%= device.systemRole %></td>
                  <td><%= device.hypervisorInstalledOn %></td>
                  <td><%= device.domainUserSignedIn %></td>
                  <td><%= device.zscalerUserSignedIn %></td>
                  <td><%= device.zscalerAppSegment %></td>
                  <td><%= device.notes || '' %></td>
                  <td class="actions">
                    <button class="btn btn-info btn-sm view-device" data-id="<%= device._id %>">View</button>
                    <button class="btn btn-warning btn-sm edit-device" data-id="<%= device._id %>">Edit</button>
                    <button class="btn btn-danger btn-sm delete-device" data-id="<%= device._id %>">Delete</button>
                  </td>
                </tr>
              <% }) %>
            <% } %>
          </tbody>
        </table>
      </div>
    </div>

    <h2>Add Device</h2>
    <!-- Add Device Form -->
    <form action="/devices/add" method="POST" class="device-form">
      <input type="hidden" name="_csrf" value="<%= csrfToken %>">
      <div>
        <label for="name">Device Name:</label>
        <input type="text" name="name" required>
      </div>
      <div>
        <label for="ipAddress">IP Address:</label>
        <input type="text" name="ipAddress" required>
      </div>
      <div>
        <label for="operatingSystem">Operating System:</label>
        <input type="text" name="operatingSystem" required>
      </div>
      <div>
        <label for="hostname">Hostname:</label>
        <input type="text" name="hostname" required>
      </div>
      <div>
        <label for="network">Network:</label>
        <input type="text" name="network" required>
      </div>
      <div>
        <label for="systemRole">System Role:</label>
        <input type="text" name="systemRole" required>
      </div>
      <div>
        <label for="hypervisorInstalledOn">Hypervisor Installed On:</label>
        <input type="text" name="hypervisorInstalledOn" required>
      </div>
      <div>
        <label for="domainUserSignedIn">Domain User Signed In:</label>
        <input type="text" name="domainUserSignedIn" required>
      </div>
      <div>
        <label for="zscalerUserSignedIn">Zscaler User Signed In:</label>
        <input type="text" name="zscalerUserSignedIn" required>
      </div>
      <div>
        <label for="zscalerAppSegment">Zscaler App Segment:</label>
        <input type="text" name="zscalerAppSegment" required>
      </div>
      <div>
        <label for="notes">Notes:</label>
        <textarea name="notes"></textarea>
      </div>
      <button type="submit" class="btn btn-primary">Add Device</button>
    </form>

  </div>

  <!-- View Device Modal -->
  <div id="viewDeviceModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Device Details</h2>
        <span class="close">&times;</span>
      </div>
      <div class="modal-body">
        <dl class="device-details">
          <!-- Details will be populated by JavaScript -->
        </dl>
      </div>
    </div>
  </div>

  <!-- Edit Device Modal -->
  <div id="editDeviceModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Edit Device</h2>
        <span class="close">&times;</span>
      </div>
      <div class="modal-body">
        <form id="editDeviceForm" class="device-form">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          <input type="hidden" name="deviceId" id="editDeviceId">
          <!-- Copy of the add device form fields with validation -->
        </form>
      </div>
    </div>
  </div>

  <!-- Delete Confirmation Modal -->
  <div id="deleteDeviceModal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h2>Confirm Delete</h2>
        <span class="close">&times;</span>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this device? This action cannot be undone.</p>
        <div class="modal-actions">
          <button id="confirmDelete" class="btn btn-danger">Delete</button>
          <button id="cancelDelete" class="btn btn-secondary">Cancel</button>
        </div>
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Initialize charts with empty data
      let charts = {
        osChart: null,
        networkChart: null,
        roleChart: null,
        hypervisorChart: null
      };

      // Initial chart creation
      updateCharts();

      function updateCharts() {
        const devices = Array.from(document.querySelectorAll('#deviceTable tbody tr:not(.device-group-header)'));
        // Update OS Chart
        updateChart('osChart', 'Operating Systems', aggregateDeviceData(devices, 'operatingSystem'));
        updateChart('networkChart', 'Networks', aggregateDeviceData(devices, 'network'));
        updateChart('roleChart', 'System Roles', aggregateDeviceData(devices, 'role'));
        updateChart('hypervisorChart', 'Hypervisors', aggregateDeviceData(devices, 'hypervisor'));
      }

      function aggregateDeviceData(devices, property) {
        const counts = {};
        devices.forEach(device => {
          let value;
          switch(property) {
            case 'operatingSystem':
              value = device.querySelector('td:nth-child(5)').textContent.trim(); // OS column
              break;
            case 'network':
              value = device.querySelector('td:nth-child(6)').textContent.trim(); // Network column
              break;
            case 'role':
              value = device.querySelector('td:nth-child(7)').textContent.trim(); // System Role column
              break;
            case 'hypervisor':
              value = device.querySelector('td:nth-child(8)').textContent.trim(); // Hypervisor column
              break;
          }
          counts[value] = (counts[value] || 0) + 1;
        });
        return {
          labels: Object.keys(counts),
          data: Object.values(counts)
        };
      }

      function updateChart(canvasId, title, data) {
        const ctx = document.getElementById(canvasId).getContext('2d');
        // Destroy existing chart if it exists
        if (charts[canvasId]) {
          charts[canvasId].destroy();
        }
        // Create new chart
        charts[canvasId] = new Chart(ctx, {
          type: 'pie',
          data: {
            labels: data.labels,
            datasets: [{
              data: data.data,
              backgroundColor: [
                '#FF6384',
                '#36A2EB',
                '#FFCE56',
                '#4BC0C0',
                '#9966FF',
                '#FF9F40'
              ]
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              legend: {
                position: 'bottom',
                labels: {
                  padding: 20,
                  usePointStyle: true
                }
              },
              title: {
                display: true,
                text: title,
                padding: 20
              },
              tooltip: {
                callbacks: {
                  label: function(context) {
                    const label = context.label || '';
                    const value = context.parsed;
                    const total = context.dataset.data.reduce((a, b) => a + b, 0);
                    const percentage = Math.round((value * 100) / total);
                    return `${label}: ${value} (${percentage}%)`;
                  }
                }
              }
            }
          }
        });
      }

      // Update charts after delete or add
      function updateDashboard() {
        updateDeviceStats();
        updateCharts();
      }

      // Make sure to call updateCharts after any table changes
      document.getElementById('confirmDelete').addEventListener('click', async () => {
        // ...existing delete code...
        if (response.ok) {
          // ...existing success code...
          updateDashboard();
        }
      });

      // Group by functionality
      document.getElementById('groupBy').addEventListener('change', function(e) {
        const groupBy = e.target.value;
        const tbody = document.querySelector('#deviceTable tbody');
        const rows = Array.from(tbody.querySelectorAll('tr'));

        if (!groupBy) {
          // Show all rows normally
          rows.forEach(row => row.style.display = '');
          return;
        }

        // Group the rows by the selected property
        const groups = {};
        rows.forEach(row => {
          const value = row.dataset[groupBy.toLowerCase()];
          if (!groups[value]) {
            groups[value] = [];
          }
          groups[value].push(row);
        });

        // Clear the table body
        tbody.innerHTML = '';

        // Add grouped rows with headers
        Object.entries(groups).forEach(([groupName, groupRows]) => {
          // Add group header
          const groupHeader = document.createElement('tr');
          groupHeader.className = 'device-group-header';
          groupHeader.innerHTML = `
            <td colspan="6" style="background: #f8f9fa; font-weight: bold; padding: 0.5rem 1rem;">
              ${groupBy}: ${groupName} (${groupRows.length} devices)
            </td>
          `;
          tbody.appendChild(groupHeader);
          // Add group rows
          groupRows.forEach(row => tbody.appendChild(row));
        });
      });

      // Improved sorting functionality
      let currentSort = {
        column: null,
        ascending: true
      };

      document.querySelectorAll('th[data-sort]').forEach(th => {
        th.addEventListener('click', function() {
          const sortBy = this.dataset.sort;
          const columnIndex = Array.from(th.parentNode.children).indexOf(th);

          // Toggle sort direction if same column, otherwise default to ascending
          if (currentSort.column === sortBy) {
            currentSort.ascending = !currentSort.ascending;
          } else {
            currentSort.column = sortBy;
            currentSort.ascending = true;
          }

          // Update sort indicators
          document.querySelectorAll('.sort-arrow').forEach(arrow => {
            arrow.textContent = '↕';
          });
          this.querySelector('.sort-arrow').textContent = currentSort.ascending ? '↑' : '↓';

          // Get all data rows (excluding headers and group headers)
          const tbody = document.querySelector('#deviceTable tbody');
          const rows = Array.from(tbody.querySelectorAll('tr:not(.device-group-header)'));

          // Sort the rows
          rows.sort((a, b) => {
            let aVal = a.children[columnIndex].textContent.trim();
            let bVal = b.children[columnIndex].textContent.trim();

            // Special handling for IP addresses
            if (sortBy === 'ipAddress') {
              aVal = ipToNumber(aVal);
              bVal = ipToNumber(bVal);
              return currentSort.ascending ? aVal - bVal : bVal - aVal;
            }

            // Regular string comparison for other columns
            return currentSort.ascending ? 
              aVal.localeCompare(bVal) : 
              bVal.localeCompare(aVal);
          });

          // Reattach sorted rows
          rows.forEach(row => tbody.appendChild(row));
        });
      });

      // Helper function to convert IP to sortable number
      function ipToNumber(ip) {
        return ip.split('.')
          .map((octet, index) => parseInt(octet) * Math.pow(256, 3 - index))
          .reduce((acc, val) => acc + val, 0);
      }

      // Close modal when clicking the X or outside
      document.querySelectorAll('.close, .modal').forEach(element => {
        element.addEventListener('click', (e) => {
          if (e.target === element) {
            document.getElementById('viewDeviceModal').style.display = 'none';
            document.getElementById('editDeviceModal').style.display = 'none';
            document.getElementById('deleteDeviceModal').style.display = 'none';
          }
        });
      });

      // Initialize controls
      const selectAllBtn = document.getElementById('selectAll');
      const selectAllCheckbox = document.getElementById('selectAllCheckbox');
      const bulkActionSelect = document.getElementById('bulkAction');
      const applyBulkBtn = document.getElementById('applyBulk');
      const exportCSVBtn = document.getElementById('exportCSV');

      // Improved checkbox delegation using event bubbling
      document.getElementById('deviceTable').addEventListener('change', function(e) {
        if (e.target.matches('.device-select, #selectAllCheckbox')) {
          updateControlsState();
        }
      });

      // Fixed updateControlsState function
      function updateControlsState() {
        const deviceCheckboxes = document.querySelectorAll('.device-select');
        const checkedBoxes = document.querySelectorAll('.device-select:checked');
        const hasSelection = checkedBoxes.length > 0;
        
        exportCSVBtn.disabled = !hasSelection;
        bulkActionSelect.disabled = !hasSelection;
        applyBulkBtn.disabled = !hasSelection || !bulkActionSelect.value;
                
        // Update select all checkbox state without triggering events
        selectAllCheckbox.checked = checkedBoxes.length === deviceCheckboxes.length && deviceCheckboxes.length > 0;
        selectAllCheckbox.indeterminate = hasSelection && checkedBoxes.length < deviceCheckboxes.length;
      }

      // Fixed Select All button handler
      selectAllBtn.addEventListener('click', () => {
        const deviceCheckboxes = document.querySelectorAll('.device-select');
        const newState = !selectAllCheckbox.checked;
        deviceCheckboxes.forEach(checkbox => checkbox.checked = newState);
        updateControlsState();
      });

      // Fixed CSV Export handler
      exportCSVBtn.addEventListener('click', () => {
        const selectedRows = Array.from(document.querySelectorAll('.device-select:checked'))
          .map(checkbox => checkbox.closest('tr'));

        if (selectedRows.length === 0) return;

        const headers = [
          'Name',
          'IP Address',
          'Operating System',
          'Hostname',
          'Network',
          'System Role',
          'Hypervisor',
          'Domain User',
          'Zscaler User',
          'Zscaler Segment',
          'Notes'
        ];

        const csvData = selectedRows.map(row => {
          return [
            row.querySelector('td:nth-child(2)').textContent.trim(), // Name
            row.querySelector('td:nth-child(3)').textContent.trim(), // IP Address
            row.querySelector('td:nth-child(4)').textContent.trim(), // OS
            row.dataset.hostname,
            row.dataset.network,
            row.querySelector('td:nth-child(5)').textContent.trim(), // Role
            row.dataset.hypervisor,
            row.dataset.domainUser,
            row.dataset.zscalerUser,
            row.dataset.zscalerSegment,
            row.dataset.notes || ''
          ].map(field => `"${(field || '').replace(/"/g, '""')}"`)
           .join(',');
        });

        const csvContent = [headers.join(','), ...csvData].join('\n');
        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const url = URL.createObjectURL(blob);
        const link = document.createElement('a');
        link.setAttribute('href', url);
        link.setAttribute('download', `devices_export_${new Date().toISOString().split('T')[0]}.csv`);
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        URL.revokeObjectURL(url);
      });

      // Initialize control states
      updateControlsState();
    });
  </script>
</body>
</html>
